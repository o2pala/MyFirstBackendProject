// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TodoApi.Migrations
{
    [DbContext(typeof(TodoContext))]
    [Migration("20250910100230_UpdateCustomer")]
    partial class UpdateCustomer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Contact", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Customerid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Customerid1")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("position")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("userCreate")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Customerid");

                    b.HasIndex("Customerid1")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("TodoApi.Models.Customer", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerStageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dateCreate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("userCreate")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TodoApi.Models.CustomerEmail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("customerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("value")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.ToTable("CustomerEmails");
                });

            modelBuilder.Entity("TodoApi.Models.CustomerPhone", b =>
                {
                    b.Property<Guid>("value")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("customerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("value");

                    b.HasIndex("customerId");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("TodoApi.Models.Email", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("contactId")
                        .HasColumnType("TEXT");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("contactId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("TodoApi.Models.Phone", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("contactId")
                        .HasColumnType("TEXT");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("contactId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("Contact", b =>
                {
                    b.HasOne("TodoApi.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("Customerid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TodoApi.Models.Customer", null)
                        .WithOne("Contacts")
                        .HasForeignKey("Contact", "Customerid1");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("TodoApi.Models.CustomerEmail", b =>
                {
                    b.HasOne("TodoApi.Models.Customer", "customer")
                        .WithMany("CustomerEmails")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("TodoApi.Models.CustomerPhone", b =>
                {
                    b.HasOne("TodoApi.Models.Customer", "customer")
                        .WithMany("CustomerPhones")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("TodoApi.Models.Email", b =>
                {
                    b.HasOne("Contact", "contact")
                        .WithMany("emails")
                        .HasForeignKey("contactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("TodoApi.Models.Phone", b =>
                {
                    b.HasOne("Contact", "contact")
                        .WithMany("phones")
                        .HasForeignKey("contactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contact");
                });

            modelBuilder.Entity("Contact", b =>
                {
                    b.Navigation("emails");

                    b.Navigation("phones");
                });

            modelBuilder.Entity("TodoApi.Models.Customer", b =>
                {
                    b.Navigation("Contacts")
                        .IsRequired();

                    b.Navigation("CustomerEmails");

                    b.Navigation("CustomerPhones");
                });
#pragma warning restore 612, 618
        }
    }
}
